# docker-compose.prod.yml
version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - api
    restart: unless-stopped
    networks:
      - agent-network

  # Frontend - React/Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.yourdomain.com
      - NEXT_PUBLIC_WS_URL=wss://api.yourdomain.com
    restart: unless-stopped
    networks:
      - agent-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # API Service - FastAPI
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
      target: production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/agent_workflows
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Agent Engine
  agent-engine:
    build:
      context: ./backend/agent-engine
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/agent_workflows
      - VECTOR_DB_URL=http://qdrant:6333
    depends_on:
      - redis
      - postgres
      - qdrant
    restart: unless-stopped
    networks:
      - agent-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.5'

  # MCP Server
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    environment:
      - MCP_DEBUG=false
      - REDIS_URL=redis://redis:6379/1
      - MCP_SECRET_KEY=${MCP_SECRET_KEY}
      - MCP_ADMIN_TOKEN=${MCP_ADMIN_TOKEN}
      - MCP_BACKEND_TOKEN=${MCP_BACKEND_TOKEN}
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - agent-network
    volumes:
      - ./mcp-server/extensions:/app/extensions

  # RAG Pipeline
  rag-pipeline:
    build:
      context: ./rag-pipeline
      dockerfile: Dockerfile
    environment:
      - RAG_DEBUG=false
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/rag_pipeline
      - REDIS_URL=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      - qdrant
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network
    volumes:
      - rag_data:/app/data
      - rag_uploads:/app/uploads

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=agent_workflows
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backups:/backups
    restart: unless-stopped
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - agent-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agent-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deploy/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - agent-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  rag_data:
    driver: local
  rag_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agent-network:
    driver: bridge
