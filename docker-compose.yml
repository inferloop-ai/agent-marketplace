version: '3.8'

services:
  # Frontend - React/Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - api
    networks:
      - agent-network

  # API Service - FastAPI Backend
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend/api:/app
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/agent_workflows
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - agent-network

  # Agent Engine - AI Agent Execution
  agent-engine:
    build:
      context: ./backend/agent-engine
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./backend/agent-engine:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/agent_workflows
      - VECTOR_DB_URL=http://qdrant:6333
    depends_on:
      - redis
      - postgres
      - qdrant
    networks:
      - agent-network

  # Workflow Engine - Workflow Orchestration
  workflow-engine:
    build:
      context: ./backend/workflow-engine
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./backend/workflow-engine:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/agent_workflows
      - AGENT_ENGINE_URL=http://agent-engine:8001
    depends_on:
      - redis
      - postgres
      - agent-engine
    networks:
      - agent-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=agent_workflows
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agent-network

  # Redis - Caching and Message Queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agent-network

  # Qdrant - Vector Database for Agent Memory
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - agent-network

  # Nginx - Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - api
    networks:
      - agent-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  qdrant_data:

networks:
  agent-network:
    driver: bridge